filter {
  mutate {
    add_field => { "logstash_output_mode" => "${LOGSTASH_OUTPUT_MODE:redis}" }
  }

  if [type] == "isc-cloudfront-standard-access-logs" {
    csv {
      separator => "	"
      quote_char => "\x00"
      columns => ["date", "time", "x-edge-location", "sc-bytes", "c-ip", "cs-method", "cs(Host)", "cs-uri-stem", "sc-status", "cs(Referer)", "cs(User-Agent)", "cs-uri-query", "cs(Cookie)", "x-edge-result-type", "x-edge-request-id", "x-host-header", "cs-protocol", "cs-bytes", "time-taken", "x-forwarded-for", "ssl-protocol", "ssl-cipher", "x-edge-response-result-type", "cs-protocol-version", "fle-status", "fle-encrypted-fields", "c-port", "time-to-first-byte", "x-edge-detailed-result-type", "sc-content-type", "sc-content-len", "sc-range-start", "sc-range-end"]
    }

    ruby {
      code => '
        begin
          t = Time.parse(event.get("time"));d = Date.parse(event.get("date"));event.set("timestamp", (Time.new(d.year, d.month, d.day, t.hour, t.min, t.sec).utc.strftime "%FT%T.%LZ"))
        rescue
          if event.get("message").include? "splunk_retries"
            event.set("splunk_retries", "found")
          else
            raise
          end
        end
      '
    }
    if [splunk_retries] {
        drop {}
    }

    date {
      match => ["timestamp", "ISO8601"]
      target => "@timestamp"
    }

    mutate {
      replace => { mdtp_component => "isc-cloudfront" }
      replace => { type => "access-logs" }
      rename => { "x-edge-request-id" => "http_x_request_id" }
      rename => { "c-ip" => "http_true_client_ip" }
      rename => { "c-port" => "http_true_client_port" }
      rename => { "sc-status" => "status" }
      rename => { "sc-bytes" => "bytes_sent" }
      rename => { "cs-method" => "request_method" }
      rename => { "x-host-header" => "http_host" }
      rename => { "cs-bytes" => "request_length" }
      rename => { "time-taken" => "request_time" }
      rename => { "cs(User-Agent)" => "http_user_agent" }
      rename => { "cs(Referer)" => "http_referrer" }
      rename => { "x-forwarded-for" => "http_x_forwarded_for" }
      rename => { "cs-uri-stem" => "uri" }
    }
    mutate {
      remove_field => "[cs(Cookie)]"
      remove_field => "[cs-uri-query]"
      remove_field => "[message]"
      remove_field => "[date]"
      remove_field => "[time]"
      remove_field => "[host]"
    }
  }

  if [type] == "isc-cloudfront-waf" {
    if [splunk_retries] {
      drop {}
    }

    mutate {
      replace => { mdtp_component => "isc-cloudfront" }
      replace => { type => "waf" }
      add_field => { http_x_request_id => "%{[httpRequest][requestId]}" }
    }

  }

  if [type] == "isc-external-filter-proxy-waf" {
    mutate {
      replace => { mdtp_component => "isc-external-filter-proxy" }
      replace => { type => "waf" }
      add_field => { http_x_request_id => "%{[httpRequest][headers]}" }
    }
    mutate {
      gsub => [
        "http_x_request_id", "^.*\{ *name *= *X-Amz-Cf-Id *, *value *= *", "",
        "http_x_request_id", "\}.*$", ""
      ]
    }
  }

  if [type] == "waf" {
    date {
      match => ["timestamp", "UNIX_MS"]
      target => "@timestamp"
    }
    ruby {
      code => '
        headersToLog = ["connection","host","user-agent","content-length","cloudfront-viewer-address","via","x-forwarded-for","referrer"]
        headers = event.get("[httpRequest][headers]")
        headers.each { |header|
          if headersToLog.include? header["name"].downcase
            fieldName = "http_#{header["name"].downcase}"
            event.set(fieldName, header["value"])
          end
        }
      '
    }
    mutate {
      rename => { "http_user-agent" => "http_user_agent" }
      add_field => { remote_addr => "%{[httpRequest][clientIp]}" }
      add_field => { country => "%{[httpRequest][country]}" }
      add_field => { request_method => "%{[httpRequest][httpMethod]}" }
      add_field => { http_version => "%{[httpRequest][httpVersion]}" }
      add_field => { uri => "%{[httpRequest][uri]}" }
    }
    mutate {
      remove_field => "[httpRequest]"
      remove_field => "[timestamp]"
      remove_field => "[requestHeadersInserted]"
      remove_field => "[host]"
    }
    if [action] == "BLOCK" and [ruleGroupList] {
      ruby {
        code => '
          ruleList = event.get("[ruleGroupList]")
          ruleList.each { |rule|
            if rule["terminatingRule"]
              event.set("terminatingRule", rule["terminatingRule"]["ruleId"])
            end
          }
        '
     }
    }
    ruby {
      path => "/usr/share/logstash/scripts/kinesis.rb"
    }
  }
}
