filter {
  if [type] == "isc-cloudfront-access-logs" {
    csv {
      separator => "	"
      quote_char => "\x00"
      columns => ["timestamp", "c-ip", "time-to-first-byte", "sc-status", "sc-bytes", "cs-method", "cs-protocol", "cs-host", "cs-uri-stem", "cs-bytes", "x-edge-location", "x-edge-request-id", "x-host-header", "time-taken", "cs-protocol-version", "c-ip-version", "cs-user-agent", "cs-referer", "cs-cookie", "cs-uri-query", "x-edge-response-result-type", "x-forwarded-for", "ssl-protocol", "ssl-cipher", "x-edge-result-type", "fle-encrypted-fields", "fle-status", "sc-content-type", "sc-content-len", "sc-range-start", "sc-range-end", "c-port", "x-edge-detailed-result-type", "c-country", "cs-accept-encoding", "cs-accept", "cache-behavior-path-pattern", "cs-headers", "cs-header-names", "cs-headers-count"]
      convert => {
        "timestamp" => "date_time"
      }
    }

    date {
        match => ["timestamp", "UNIX"]
        target => "@timestamp"
    }

    mutate {
      replace => { mdtp_component => "isc-cloudfront" }
      replace => { type => "access-logs" }
      rename => { "x-edge-request-id" => "http_x_request_id" }
      rename => { "c-ip" => "http_true_client_ip" }
      rename => { "c-port" => "http_true_client_port" }
      rename => { "sc-status" => "status" }
      rename => { "sc-bytes" => "bytes_sent" }
      rename => { "cs-method" => "request_method" }
      rename => { "cs-host" => "http_host" }
      rename => { "cs-bytes" => "request_length" }
      rename => { "time-taken" => "request_time" }
      rename => { "cs-user-agent" => "http_user_agent" }
      rename => { "cs-referer" => "http_referrer" }
      rename => { "x-forwarded-for" => "http_x_forwarded_for" }
    }
    mutate {
      remove_field => "[cs-cookie]"
      remove_field => "[cs-headers]"
      remove_field => "[cs-uri-stem]"
      remove_field => "[cs-uri-query]"
      remove_field => "[message]"
      remove_field => "[timestamp]"
      remove_field => "[host]"
    }
  }
}

filter {
  if [type] == "isc-cloudfront-waf" {
    mutate {
      replace => { mdtp_component => "isc-cloudfront" }
      replace => { type => "waf" }
      add_field => { http_x_request_id => "%{[httpRequest][requestId]}" }
    }
  }
}

filter {
  if [type] == "isc-filter-proxy-waf" {
    mutate {
      replace => { mdtp_component => "isc-filter-proxy" }
      replace => { type => "waf" }
      add_field => { http_x_request_id => "%{[httpRequest][headers]}" }
    }
    mutate {
      gsub => [
        "http_x_request_id", "^.*\{ *name *= *X-Amz-Cf-Id *, *value *= *", "",
        "http_x_request_id", "\}.*$", ""
      ]
    }
  }
}

filter {
  if [type] == "waf" {
    date {
        match => ["timestamp", "UNIX_MS"]
        target => "@timestamp"
    }
    ruby {
        code => '
            headersToLog = ["connection","host","user-agent","content-length","cloudfront-viewer-address","via","x-forwarded-for","referrer"]
            headers = event.get("[httpRequest][headers]")
            headers.each { |header|
                if headersToLog.include? header["name"].downcase
                    fieldName = "http_#{header["name"].downcase}"
                    event.set(fieldName, header["value"])
                end
            }
        '
    }
    mutate {
      rename => { "http_user-agent" => "http_user_agent" }
      add_field => { remote_addr => "%{[httpRequest][clientIp]}" }
      add_field => { country => "%{[httpRequest][country]}" }
      add_field => { request_method => "%{[httpRequest][httpMethod]}" }
      add_field => { http_version => "%{[httpRequest][httpVersion]}" }
      add_field => { uri => "%{[httpRequest][uri]}" }
    }
    mutate {
      remove_field => "[httpRequest]"
      remove_field => "[timestamp]"
      remove_field => "[requestHeadersInserted]"
      remove_field => "[host]"
    }
    if [action] == "BLOCK" and [ruleGroupList] {
      ruby {
        code => '
          ruleList = event.get("[ruleGroupList]")
          ruleList.each { |rule|
            if rule["terminatingRule"]
              event.set("terminatingRule", rule["terminatingRule"]["ruleId"])
            end
          }
        '
     }
    }
    ruby {
      path => "/usr/share/logstash/pipeline/filter_kinesis.rb"
    }
  }
}
